{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\William\\\\Programs\\\\WRamsay_Website_Portfoloio\\\\wramsay\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport WebFooter from './web_footer/web_footer';\nimport Navbar from './navbar/navbar';\nimport Project from './project_tab/project_tab';\nimport Intro from './introduction/introduction';\nimport ItemCard from './itemcard/itemcard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Intro, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"section_card\",\n    children: \"Education\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n    src: \".\\\\images\\\\education.jpg\",\n    title: \"Bachelors of Science\",\n    desc: \"\\nMajor in Computer Science\\nUniversity of Northern British Columbia\",\n    flip: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"section_card\",\n    children: \"Projects\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n    src: \".\\\\images\\\\machine-learning.jpg\",\n    title: \"Reddit Sentiment Analysis RNN\",\n    desc: \" Worked with a team in Python to create a\\nrecurrent neural network (RNN) that\\njudges the sentiment of text.\\n\\u2022 The program would scrape subreddits and\\nthen, predict the sentiment of the\\ncomments.\\n\\u2022 The program would then output the\\nsentiment of each comment.\\n\",\n    flip: \"flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n    src: \".\\\\images\\\\code.jpg\",\n    title: \"Frequent Pattern Growth Algorithm\",\n    desc: \"\\n\\u2022 Implemented the data mining algorithm\\nfrequent pattern growth in Java.\\n\\u2022 The Algorithm uses trees and the divide\\nand conquer approach to find frequent\\npatterns in the provided data set and\\nminimum support.\\n\\u2022 Outputs the frequent patterns and the\\ntime it took to produce the result.\",\n    flip: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ItemCard, {\n    src: \".\\\\images\\\\discord_bot.jpg\",\n    title: \"Discord Text / Image Generator\",\n    desc: \"Generates images/text rememebers previous text. can generate images directly from the user or from a text generation of what the user wants to see.\",\n    flip: \"flip\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(WebFooter, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 3\n}, this));\n{/*\n   ItemCard src='' title='' desc='' flip='' />\n */}","map":{"version":3,"names":["React","ReactDOM","WebFooter","Navbar","Project","Intro","ItemCard","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","title","desc","flip"],"sources":["C:/Users/William/Programs/WRamsay_Website_Portfoloio/wramsay/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport WebFooter from './web_footer/web_footer';\nimport Navbar from './navbar/navbar'\nimport Project from './project_tab/project_tab';\nimport Intro from './introduction/introduction';\nimport ItemCard from './itemcard/itemcard';\n\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Navbar />\n    <Intro />\n    {/* <Project /> */}\n\n    <span className='section_card'>Education</span>\n\n    <ItemCard \n    src='.\\images\\education.jpg' \n    title='Bachelors of Science' \n    desc='\nMajor in Computer Science\nUniversity of Northern British Columbia' \n    flip='' />\n\n\n\n    <span className='section_card'>Projects</span>\n\n    <ItemCard \n    src= '.\\images\\machine-learning.jpg' \n    title=\"Reddit Sentiment Analysis RNN\" \n    desc=\" Worked with a team in Python to create a\nrecurrent neural network (RNN) that\njudges the sentiment of text.\n• The program would scrape subreddits and\nthen, predict the sentiment of the\ncomments.\n• The program would then output the\nsentiment of each comment.\n\"\n  flip=\"flip\" />\n\n    \n\n    <ItemCard src='.\\images\\code.jpg' title='Frequent Pattern Growth Algorithm' desc='\n• Implemented the data mining algorithm\nfrequent pattern growth in Java.\n• The Algorithm uses trees and the divide\nand conquer approach to find frequent\npatterns in the provided data set and\nminimum support.\n• Outputs the frequent patterns and the\ntime it took to produce the result.' flip='' />\n\n    <ItemCard  src='.\\images\\discord_bot.jpg' title='Discord Text / Image Generator' desc='Generates images/text rememebers previous text. can generate images directly from the user or from a text generation of what the user wants to see.' \n    flip='flip' />\n\n    {/* <ItemCard src='' title='' desc='' flip='' /> */}\n    <WebFooter />\n    \n\n    \n    \n  </React.StrictMode>\n);\n\n\n\n\n{/*\n\n  ItemCard src='' title='' desc='' flip='' />\n\n*/}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,QAAQ,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI3C,MAAMC,IAAI,GAAGR,QAAQ,CAACS,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTL,OAAA,CAACR,KAAK,CAACc,UAAU;EAAAC,QAAA,gBACfP,OAAA,CAACL,MAAM;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACVX,OAAA,CAACH,KAAK;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAGTX,OAAA;IAAMY,SAAS,EAAC,cAAc;IAAAL,QAAA,EAAC;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,eAE/CX,OAAA,CAACF,QAAQ;IACTe,GAAG,EAAC,0BAAwB;IAC5BC,KAAK,EAAC,sBAAsB;IAC5BC,IAAI,EAAC,sEAE+B;IACpCC,IAAI,EAAC;EAAE;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAIVX,OAAA;IAAMY,SAAS,EAAC,cAAc;IAAAL,QAAA,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC,eAE9CX,OAAA,CAACF,QAAQ;IACTe,GAAG,EAAE,iCAA+B;IACpCC,KAAK,EAAC,+BAA+B;IACrCC,IAAI,EAAC,sRAQR;IACCC,IAAI,EAAC;EAAM;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAIZX,OAAA,CAACF,QAAQ;IAACe,GAAG,EAAC,qBAAmB;IAACC,KAAK,EAAC,mCAAmC;IAACC,IAAI,EAAC,qTAQjD;IAACC,IAAI,EAAC;EAAE;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAE3CX,OAAA,CAACF,QAAQ;IAAEe,GAAG,EAAC,4BAA0B;IAACC,KAAK,EAAC,gCAAgC;IAACC,IAAI,EAAC,qJAAqJ;IAC3OC,IAAI,EAAC;EAAM;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eAGdX,OAAA,CAACN,SAAS;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAKG,CACpB,CAAC;AAKD,CAAC;AACD;AACA,GAFC"},"metadata":{},"sourceType":"module","externalDependencies":[]}